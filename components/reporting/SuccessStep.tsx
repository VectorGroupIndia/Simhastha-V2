

import React from 'react';
import { useNavigate } from 'react-router-dom';
import { ReportData } from '../../pages/ReportFlowPage';
import { useLanguage } from '../../contexts/LanguageContext';

declare const jspdf: any;

interface SuccessStepProps {
    onFileAnother: () => void;
    reportData: ReportData;
    matchIds: string[];
}

const SuccessStep: React.FC<SuccessStepProps> = ({ onFileAnother, reportData, matchIds }) => {
    const { t } = useLanguage();
    const navigate = useNavigate();

     const handleDownloadPdf = () => {
        const doc = new jspdf.jsPDF();
        const report = reportData;

        doc.setFontSize(20);
        doc.text("Foundtastic - Report Summary", 14, 22);
        doc.setFontSize(12);
        doc.text(`Report Type: ${report.reportType === 'lost' ? 'Lost Item' : 'Found Item'}`, 14, 32);

        const locationLabel = report.reportType === 'lost' ? 'Last Seen Location' : 'Found Location';
        const tableColumn = ["Detail", "Information"];
        const tableRows = [
            ["Item Name", report.itemName],
            ["Category", `${report.category} - ${report.subcategory}`],
            ["Description", report.description],
            [locationLabel, `${report.location}, ${report.city}`],
        ];

        if (report.brand) tableRows.push(["Brand", report.brand]);
        if (report.color) tableRows.push(["Color", report.color]);
        if (report.material) tableRows.push(["Material", report.material]);
        if (report.identifyingMarks) tableRows.push(["Identifying Marks", report.identifyingMarks]);
        if (report.serialNumber) tableRows.push(["Serial/Document Number", report.serialNumber]);
        if (report.tags) tableRows.push(["Tags / Keywords", report.tags]);

        let startY = 40;
        if (report.imagePreview) {
            try {
                const img = new Image();
                img.src = report.imagePreview;
                const imgProps = doc.getImageProperties(img);
                const pdfWidth = doc.internal.pageSize.getWidth();
                const margin = 14;
                const availableWidth = pdfWidth - margin * 2;
                const aspect = imgProps.height / imgProps.width;
                const imgHeight = availableWidth * aspect;
                doc.addImage(report.imagePreview, 'PNG', margin, startY, availableWidth, imgHeight > 100 ? 100 : imgHeight);
                startY += (imgHeight > 100 ? 100 : imgHeight) + 10;
            } catch (e) {
                console.error("Error adding image to PDF", e);
            }
        }
        
        doc.autoTable({
            startY: startY,
            head: [tableColumn],
            body: tableRows,
            theme: 'grid',
            headStyles: { fillColor: [30, 58, 138] }, // brand-primary color
        });

        const pageCount = doc.internal.getNumberOfPages();
        for (let i = 1; i <= pageCount; i++) {
            doc.setPage(i);
            doc.setFontSize(8);
            doc.text(`Page ${i} of ${pageCount}`, doc.internal.pageSize.width / 2, 287, { align: 'center' });
            doc.text(`Generated by Foundtastic on ${new Date().toLocaleString()}`, 14, 287);
        }

        doc.save(`foundtastic-report-${report.itemName.replace(/\s/g, '_')}.pdf`);
    };
    
    return (
        <div className="text-center space-y-8">
            <svg className="mx-auto h-16 w-16 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <p className="text-lg text-slate-700">
                {t.successMessage.replace('{itemName}', reportData.itemName)}
            </p>

            {matchIds.length > 0 && (
                <div className="p-4 bg-green-50 border-l-4 border-green-400 text-left">
                    <h3 className="text-md font-semibold text-green-800">{t.matchSuccessTitle}</h3>
                    <p className="text-sm text-green-700 mt-2">
                        {t.matchSuccessBody.replace('{count}', matchIds.length.toString())}
                    </p>
                    <button 
                        onClick={() => navigate('/profile')}
                        className="mt-4 w-full sm:w-auto bg-green-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-green-700 transition-colors"
                    >
                        {t.viewMatchesButton}
                    </button>
                </div>
            )}

            <div className="p-4 bg-blue-50 border-l-4 border-blue-400 text-left space-y-4">
                <h3 className="text-md font-semibold text-blue-800">{t.successNoteTitle}</h3>
                <ul className="list-disc list-inside space-y-2 text-sm text-blue-700 pl-4">
                    {t.successNoteList.map((note, index) => {
                        const ceirLink = '<a href="https://www.ceir.gov.in/Home/index.jsp" target="_blank" rel="noopener noreferrer" class="font-semibold underline hover:text-blue-900">Central Equipment Identity Register (CEIR)</a>';
                        const finalNote = note.includes('CEIR') ? note.replace('Central Equipment Identity Register (CEIR)', ceirLink) : note;
                        return <li key={index} dangerouslySetInnerHTML={{ __html: finalNote }}></li>
                    })}
                </ul>
            </div>
            
            <div className="p-4 bg-red-50 border-l-4 border-red-400 text-left space-y-4">
                <h3 className="text-md font-semibold text-red-800">{t.successDisclaimerTitle}</h3>
                <ul className="list-disc list-inside space-y-2 text-sm text-red-700 pl-4">
                    {t.successDisclaimerList.map((item, index) => <li key={index}>{item}</li>)}
                </ul>
            </div>
            
             <div className="flex flex-col sm:flex-row justify-center items-center gap-4 border-t pt-6">
                 <button 
                    onClick={handleDownloadPdf} 
                    className="w-full sm:w-auto bg-transparent border border-brand-primary text-brand-primary font-semibold py-2 px-6 rounded-md hover:bg-brand-primary hover:text-white transition-colors"
                >
                    {t.successDownload}
                </button>
                <button 
                    onClick={onFileAnother} 
                    className="w-full sm:w-auto bg-brand-secondary text-white font-semibold py-2 px-6 rounded-md hover:opacity-90 transition-opacity"
                >
                    {t.successFileAnother}
                </button>
            </div>
        </div>
    );
};

export default SuccessStep;